@{
    ViewData["Title"] = "Детали заказа";
    var order = ViewData["Order"] as ASP_421.Data.Entities.Order;
}

@if (order != null)
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Головна</a></li>
                        <li class="breadcrumb-item"><a asp-controller="User" asp-action="Profile" asp-route-id="@Context.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value">Профіль</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Заказ #@order.Id.ToString().Substring(0, 8)</li>
                    </ol>
                </nav>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h4 class="mb-0">
                                <i class="bi bi-receipt"></i> Заказ #@order.Id.ToString().Substring(0, 8)
                            </h4>
                            <div>
                                @if (order.Status == "Completed")
                                {
                                    <span class="badge bg-success fs-6">
                                        <i class="bi bi-check-circle"></i> Завершен
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-warning fs-6">
                                        <i class="bi bi-clock"></i> @order.Status
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h6>Информация о заказе</h6>
                                <table class="table table-sm">
                                    <tr>
                                        <td><strong>Дата заказа:</strong></td>
                                        <td>@order.OrderDate.ToString("dd.MM.yyyy HH:mm")</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Количество товаров:</strong></td>
                                        <td>@order.ItemsCount шт.</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Общая сумма:</strong></td>
                                        <td class="fw-bold text-primary">@order.TotalAmount.ToString("C")</td>
                                    </tr>
                                    @if (order.CompletedAt.HasValue)
                                    {
                                        <tr>
                                            <td><strong>Завершен:</strong></td>
                                            <td>@order.CompletedAt.Value.ToString("dd.MM.yyyy HH:mm")</td>
                                        </tr>
                                    }
                                </table>
                            </div>
                            <div class="col-md-6">
                                <h6>Действия</h6>
                                <div class="d-grid gap-2">
                                    <button class="btn btn-success" onclick="repeatOrder('@order.Id.ToString()')">
                                        <i class="bi bi-arrow-clockwise"></i> Повторить заказ
                                    </button>
                                    <a asp-controller="User" asp-action="Profile" asp-route-id="@Context.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value" class="btn btn-outline-secondary">
                                        <i class="bi bi-arrow-left"></i> Назад к истории
                                    </a>
                                </div>
                            </div>
                        </div>

                        <hr>

                        <h5 class="mb-3">
                            <i class="bi bi-list-ul"></i> Товары в заказе
                        </h5>
                        
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Товар</th>
                                        <th class="text-center">Количество</th>
                                        <th class="text-end">Цена</th>
                                        <th class="text-end">Сумма</th>
                                        <th class="text-end">Новая сумма</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in order.OrderItems)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    @if (!string.IsNullOrEmpty(item.ProductImageUrl))
                                                    {
                                                        <img src="/Storage/Item/@item.ProductImageUrl" 
                                                             class="me-3" 
                                                             style="width: 50px; height: 50px; object-fit: cover; border-radius: 6px;" 
                                                             alt="@item.ProductName">
                                                    }
                                                    else
                                                    {
                                                        <div class="me-3 bg-light d-flex align-items-center justify-content-center" 
                                                             style="width: 50px; height: 50px; border-radius: 6px;">
                                                            <i class="bi bi-image text-muted"></i>
                                                        </div>
                                                    }
                                                    <div>
                                                        <h6 class="mb-1">@item.ProductName</h6>
                                                        @if (!string.IsNullOrEmpty(item.ProductDescription))
                                                        {
                                                            <small class="text-muted">@item.ProductDescription</small>
                                                        }
                                                        <br>
                                                        <small class="text-muted">
                                                            <i class="bi bi-tag"></i> @item.ProductGroupName
                                                        </small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="text-center">
                                                <div class="input-group input-group-sm" style="width: 120px; margin: 0 auto;">
                                                    <button class="btn btn-outline-secondary" type="button" 
                                                            onclick="decreaseOrderItemQuantity('@item.ProductId.ToString()', this)">
                                                        <i class="bi bi-dash"></i>
                                                    </button>
                                                    <input type="number" class="form-control text-center" 
                                                           id="quantity-@item.ProductId.ToString()"
                                                           value="@item.Quantity" min="1" max="99"
                                                           onchange="updateOrderItemQuantity('@item.ProductId.ToString()', parseInt(this.value))">
                                                    <button class="btn btn-outline-secondary" type="button" 
                                                            onclick="increaseOrderItemQuantity('@item.ProductId.ToString()', this)">
                                                        <i class="bi bi-plus"></i>
                                                    </button>
                                                </div>
                                            </td>
                                            <td class="text-end">
                                                <span class="fw-bold">@item.ProductPrice.ToString("C")</span>
                                            </td>
                                            <td class="text-end">
                                                <span class="fw-bold text-primary" id="new-total-@item.ProductId.ToString()">
                                                    @item.TotalPrice.ToString("C")
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot class="table-light">
                                    <tr>
                                        <th colspan="3" class="text-end">Итого:</th>
                                        <th class="text-end text-primary">@order.TotalAmount.ToString("C")</th>
                                        <th class="text-end text-success" id="new-total-sum">
                                            @order.TotalAmount.ToString("C")
                                        </th>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger text-center">
                    <i class="bi bi-exclamation-triangle fs-1"></i>
                    <h4>Заказ не найден</h4>
                    <p>Запрашиваемый заказ не существует или был удален.</p>
                    <a asp-controller="Orders" asp-action="History" class="btn btn-primary">Вернуться к истории</a>
                </div>
            </div>
        </div>
    </div>
}

<script>
function repeatOrder(orderId) {
    console.log('Repeating order:', orderId);
    console.log('OrderId type:', typeof orderId);
    
    if (!confirm('Ви впевнені, що хочете повторити цей заказ з поточними кількостями товарів?')) {
        return;
    }
    
    const button = event.target;
    const originalText = button.innerHTML;
    
    button.innerHTML = '<i class="bi bi-hourglass-split"></i> Повторяємо...';
    button.disabled = true;
    
    console.log('Sending request to /Orders/RepeatOrder with orderId:', orderId);
    
    // Собираем данные о товарах с их новыми количествами
    const orderItems = [];
    document.querySelectorAll('input[id^="quantity-"]').forEach(input => {
        const productId = input.id.replace('quantity-', '');
        const quantity = parseInt(input.value);
        orderItems.push({
            productId: productId,
            quantity: quantity
        });
    });
    
    console.log('Order items with quantities:', orderItems);
    
    fetch('/Orders/RepeatOrder', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            orderId: orderId,
            items: orderItems
        })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Repeat order response:', data);
        if (data.success) {
            // Показываем основное сообщение
            showOrderNotification(data.message, 'success');
            
            // Если есть недоступные товары, показываем детальную информацию
            if (data.unavailableProducts && data.unavailableProducts.length > 0) {
                setTimeout(() => {
                    showUnavailableProductsModal(data.unavailableProducts);
                }, 1000);
            }
            
            // Обновляем счетчик корзины
            updateCartCounter();
            
            // Перенаправляем в корзину
            setTimeout(() => {
                window.location.href = '/Cart';
            }, data.unavailableProducts && data.unavailableProducts.length > 0 ? 3000 : 1000);
        } else {
            showOrderNotification(data.message || 'Помилка повторення замовлення', 'danger');
        }
    })
    .catch(error => {
        console.error('Error repeating order:', error);
        showOrderNotification('Сталась помилка, повторіть дію пізніше', 'danger');
    })
    .finally(() => {
        button.innerHTML = originalText;
        button.disabled = false;
    });
}

// Функции для управления количеством товаров в заказе
function increaseOrderItemQuantity(productId, button) {
    const quantityInput = document.getElementById(`quantity-${productId}`);
    const currentQuantity = parseInt(quantityInput.value);
    const newQuantity = currentQuantity + 1;
    
    if (newQuantity <= 99) {
        quantityInput.value = newQuantity;
        updateOrderItemTotal(productId, newQuantity);
        updateTotalSum();
    }
}

function decreaseOrderItemQuantity(productId, button) {
    const quantityInput = document.getElementById(`quantity-${productId}`);
    const currentQuantity = parseInt(quantityInput.value);
    const newQuantity = currentQuantity - 1;
    
    if (newQuantity >= 1) {
        quantityInput.value = newQuantity;
        updateOrderItemTotal(productId, newQuantity);
        updateTotalSum();
    }
}

function updateOrderItemQuantity(productId, newQuantity) {
    if (newQuantity >= 1 && newQuantity <= 99) {
        updateOrderItemTotal(productId, newQuantity);
        updateTotalSum();
    } else {
        // Возвращаем предыдущее значение, если новое недопустимо
        const quantityInput = document.getElementById(`quantity-${productId}`);
        quantityInput.value = quantityInput.getAttribute('data-original-value') || 1;
    }
}

function updateOrderItemTotal(productId, quantity) {
    // Получаем цену товара из таблицы
    const row = document.querySelector(`input[id="quantity-${productId}"]`).closest('tr');
    const priceElement = row.querySelector('td:nth-child(3) span');
    const priceText = priceElement.textContent.replace(/[^\d.,]/g, '').replace(',', '.');
    const price = parseFloat(priceText);
    
    // Вычисляем новую сумму
    const newTotal = price * quantity;
    
    // Обновляем отображение суммы
    const totalElement = document.getElementById(`new-total-${productId}`);
    totalElement.textContent = newTotal.toLocaleString('uk-UA', {
        style: 'currency',
        currency: 'UAH'
    });
}

function updateTotalSum() {
    let totalSum = 0;
    
    // Собираем все новые суммы товаров
    document.querySelectorAll('[id^="new-total-"]').forEach(element => {
        const totalText = element.textContent.replace(/[^\d.,]/g, '').replace(',', '.');
        const total = parseFloat(totalText);
        if (!isNaN(total)) {
            totalSum += total;
        }
    });
    
    // Обновляем общую сумму
    const totalSumElement = document.getElementById('new-total-sum');
    totalSumElement.textContent = totalSum.toLocaleString('uk-UA', {
        style: 'currency',
        currency: 'UAH'
    });
}

// Инициализация при загрузке страницы
document.addEventListener('DOMContentLoaded', function() {
    // Сохраняем оригинальные значения количества
    document.querySelectorAll('input[id^="quantity-"]').forEach(input => {
        input.setAttribute('data-original-value', input.value);
    });
    
    // Инициализируем общую сумму
    updateTotalSum();
});

function updateCartCounter() {
    fetch('/api/cart/count')
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.status === 'Ok') {
                const cartCounter = document.getElementById('cart-counter');
                if (cartCounter) {
                    const count = data.data.Count || data.data.count || 0;
                    cartCounter.textContent = count;
                    cartCounter.style.display = count > 0 ? 'inline' : 'none';
                }
            }
        })
        .catch(error => {
            console.error('Ошибка обновления счетчика корзины:', error);
        });
}

function showOrderNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    
    notification.innerHTML = `
        <i class="bi bi-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-triangle' : 'info-circle'}"></i>
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 3000);
}

function showUnavailableProductsModal(unavailableProducts) {
    // Создаем модальное окно
    const modalHtml = `
        <div class="modal fade" id="unavailableProductsModal" tabindex="-1" aria-labelledby="unavailableProductsModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="unavailableProductsModalLabel">
                            <i class="bi bi-exclamation-triangle text-warning"></i>
                            Недоступні товари
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-warning">
                            <i class="bi bi-info-circle"></i>
                            Деякі товари з вашого замовлення недоступні або закінчилися. Замовлення буде виконано з доступними товарами.
                        </div>
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Товар</th>
                                        <th>Запитано</th>
                                        <th>Доступно</th>
                                        <th>Статус</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${unavailableProducts.map(product => `
                                        <tr>
                                            <td><strong>${product.productName}</strong></td>
                                            <td>${product.requestedQuantity} шт.</td>
                                            <td>${product.availableQuantity} шт.</td>
                                            <td>
                                                ${product.availableQuantity > 0 
                                                    ? '<span class="badge bg-warning">Частково доступний</span>' 
                                                    : '<span class="badge bg-danger">Недоступний</span>'
                                                }
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                        <div class="mt-3">
                            <h6>Деталі:</h6>
                            <ul class="list-group">
                                ${unavailableProducts.map(product => `
                                    <li class="list-group-item">
                                        <i class="bi bi-info-circle text-info"></i>
                                        ${product.message}
                                    </li>
                                `).join('')}
                            </ul>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">
                            <i class="bi bi-check-circle"></i> Зрозуміло
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Добавляем модальное окно в DOM
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // Показываем модальное окно
    const modal = new bootstrap.Modal(document.getElementById('unavailableProductsModal'));
    modal.show();
    
    // Удаляем модальное окно из DOM после закрытия
    document.getElementById('unavailableProductsModal').addEventListener('hidden.bs.modal', function () {
        this.remove();
    });
}
</script>
