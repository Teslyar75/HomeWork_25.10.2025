@model ASP_421.Data.Entities.ProductGroup
@{
    ViewData["Title"] = ViewData["Group"]?.ToString() ?? "Група товарів";
    var group = ViewData["Group"] as ASP_421.Data.Entities.ProductGroup;
    var products = ViewData["Products"] as List<ASP_421.Data.Entities.Product>;
}

<div class="container mt-4">
    @if (group != null)
    {
        <div class="row">
            <div class="col-12">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a asp-controller="Shop" asp-action="Index">Головна</a></li>
                        <li class="breadcrumb-item active" aria-current="page">@group.Name</li>
                    </ol>
                </nav>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h1 class="card-title">@group.Name</h1>
                        @if (!string.IsNullOrEmpty(group.Description))
                        {
                            <p class="card-text">@group.Description</p>
                        }
                        <p class="text-muted">
                            <i class="bi bi-box"></i> 
                            @(products?.Count ?? 0) товарів
                        </p>
                    </div>
                </div>
            </div>
        </div>

        @if (products != null && products.Any())
        {
            <div class="row">
                @foreach (var product in products)
                {
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="card h-100">
                            <a asp-controller="Shop" asp-action="Product" asp-route-slug="@product.Slug" class="text-decoration-none">
                                @if (!string.IsNullOrEmpty(product.ImageUrl))
                                {
                                    <img src="/Storage/Item/@product.ImageUrl" class="card-img-top product-preview-image" alt="@product.Name">
                                }
                                else
                                {
                                    <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
                                        <i class="bi bi-image fs-1 text-muted"></i>
                                    </div>
                                }
                            </a>
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">
                                    <a asp-controller="Shop" asp-action="Product" asp-route-slug="@product.Slug" class="text-decoration-none text-dark">
                                        @product.Name
                                    </a>
                                </h5>
                                @if (!string.IsNullOrEmpty(product.Description))
                                {
                                    <p class="card-text flex-grow-1">@product.Description</p>
                                }
                                <div class="mt-auto">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="h5 text-primary mb-0">@product.Price.ToString("C")</span>
                                        <small class="text-muted">
                                            <i class="bi bi-box"></i> @product.Stock шт.
                                        </small>
                                    </div>
                                    <div class="d-grid gap-2">
                                        <a asp-controller="Shop" asp-action="Product" asp-route-slug="@product.Slug" 
                                           class="btn btn-outline-primary">
                                            <i class="bi bi-eye"></i> Переглянути
                                        </a>
                                        <button class="btn btn-primary btn-cart" onclick="addToCart('@product.Id')">
                                            <i class="bi bi-cart-plus"></i> Додати в кошик
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-12">
                    <div class="alert alert-info text-center">
                        <i class="bi bi-info-circle fs-1"></i>
                        <h4>Товари відсутні</h4>
                        <p>В цій групі поки що немає товарів.</p>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger text-center">
                    <i class="bi bi-exclamation-triangle fs-1"></i>
                    <h4>Група не знайдена</h4>
                    <p>Запитана група товарів не існує.</p>
                    <a asp-controller="Shop" asp-action="Index" class="btn btn-primary">Повернутися до головної</a>
                </div>
            </div>
        </div>
    }
</div>

<script>
// Version: 1.1 - Fixed API response format handling
function addToCart(productId) {
    // Проверка авторизации ПЕРЕД отправкой запроса
    const isAuthenticated = @(Context.User.Identity?.IsAuthenticated ?? false ? "true" : "false");
    console.log('Is authenticated:', isAuthenticated);
    console.log('Product ID:', productId);
    
    if (!isAuthenticated) {
        showCartNotification('Please login to add items to cart', 'warning');
        return; // НЕ ОТПРАВЛЯЕМ ЗАПРОС
    }
    
    // Показываем уведомление пользователю
    const button = event.target;
    const originalText = button.innerHTML;
    
    // Изменяем текст кнопки на время обработки
    button.innerHTML = '<i class="bi bi-hourglass-split"></i> Adding...';
    button.disabled = true;
    
    // Отправляем запрос на сервер
    const requestData = {
        productId: productId,
        quantity: 1
    };
    console.log('Sending request:', requestData);
    
    fetch('/api/cart/add', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
    })
    .then(response => response.json())
    .then(data => {
        console.log('Cart API Response:', data);
        console.log('Checking status - data.Status:', data.Status, 'data.status:', data.status);
        if (data.Status === 'Ok' || data.status === 'Ok') {
            console.log('Success! Showing success notification');
            showCartNotification('Item added to cart!', 'success');
            
            // Обновляем счетчик корзины в навигации
            updateCartCounter();
            
            // Добавляем визуальную индикацию
            button.classList.add('btn-success');
            setTimeout(() => {
                button.classList.remove('btn-success');
                button.classList.add('btn-primary');
            }, 1000);
        } else {
            console.log('Error! Status is not Ok. Showing error notification');
            showCartNotification(data.ErrorMessage || data.errorMessage || 'Error adding to cart', 'danger');
        }
    })
    .catch(error => {
        console.error('Cart API Error:', error);
        showCartNotification('Network error: ' + error.message, 'danger');
    })
    .finally(() => {
        // Восстанавливаем кнопку
        button.innerHTML = originalText;
        button.disabled = false;
    });
}

function updateCartCounter() {
    fetch('/api/cart/count')
        .then(response => response.json())
        .then(data => {
            if (data.Status === 'Ok' || data.status === 'Ok') {
                const cartCounter = document.getElementById('cart-counter');
                if (cartCounter) {
                    // Поддерживаем как PascalCase, так и camelCase
                    const count = data.Data?.Count || data.Data?.count || data.data?.Count || data.data?.count || 0;
                    cartCounter.textContent = count;
                    cartCounter.style.display = count > 0 ? 'inline' : 'none';
                }
            }
        })
        .catch(error => {
            console.error('Error updating cart counter:', error);
        });
}

function showCartNotification(message, type = 'info') {
    // Создаем уведомление
    const notification = document.createElement('div');
    notification.className = 'alert alert-' + type + ' alert-dismissible fade show position-fixed';
    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    
    notification.innerHTML = 
        '<i class="bi bi-' + (type === 'success' ? 'check-circle' : 'info-circle') + '"></i>' +
        message +
        '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>';
    
    document.body.appendChild(notification);
    
    // Автоматически скрываем через 3 секунды
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 3000);
}
</script>
