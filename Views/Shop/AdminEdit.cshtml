@model ASP_421.Models.Shop.AdminEditViewModel
@{
    ViewData["Title"] = "Редактирование групп и товаров";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="bi bi-pencil-square"></i> Редактирование групп и товаров</h2>
                <div>
                    <a asp-controller="Shop" asp-action="Admin" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Назад к админке
                    </a>
                </div>
            </div>

            <!-- Навигационные вкладки -->
            <ul class="nav nav-tabs" id="adminTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="groups-tab" data-bs-toggle="tab" data-bs-target="#groups" type="button" role="tab">
                        <i class="bi bi-collection"></i> Группы (@Model.Groups.Count)
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="products-tab" data-bs-toggle="tab" data-bs-target="#products" type="button" role="tab">
                        <i class="bi bi-box"></i> Товары (@Model.Products.Count)
                    </button>
                </li>
            </ul>

            <div class="tab-content" id="adminTabsContent">
                <!-- Вкладка групп -->
                <div class="tab-pane fade show active" id="groups" role="tabpanel">
                    <div class="card mt-3">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="bi bi-collection"></i> Управление группами
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover" id="groupsTable">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Название</th>
                                            <th>Описание</th>
                                            <th>Родительская группа</th>
                                            <th>Товары</th>
                                            <th>Подгруппы</th>
                                            <th>Slug</th>
                                            <th>Действия</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var group in Model.Groups)
                                        {
                                            <tr data-group-id="@group.Id">
                                                <td>
                                                    <strong>@group.Name</strong>
                                                    @if (group.IsDeleted)
                                                    {
                                                        <span class="badge bg-danger ms-2">Удалена</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(group.Description))
                                                    {
                                                        <span title="@group.Description">
                                                            @(group.Description.Length > 50 ? group.Description.Substring(0, 50) + "..." : group.Description)
                                                        </span>
                                                    }
                                                </td>
                                                <td>@group.ParentName</td>
                                                <td>
                                                    <span class="badge bg-primary">@group.ProductsCount</span>
                                                </td>
                                                <td>
                                                    <span class="badge bg-info">@group.SubGroupsCount</span>
                                                </td>
                                                <td>
                                                    <code>@group.Slug</code>
                                                </td>
                                                <td>
                                                    <div class="btn-group" role="group">
                                                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="editGroup('@group.Id')">
                                                            <i class="bi bi-pencil"></i>
                                                        </button>
                                                        @if (!group.IsDeleted)
                                                        {
                                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteGroup('@group.Id', '@group.Name')">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Вкладка товаров -->
                <div class="tab-pane fade" id="products" role="tabpanel">
                    <div class="card mt-3">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="bi bi-box"></i> Управление товарами
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover" id="productsTable">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Название</th>
                                            <th>Описание</th>
                                            <th>Группа</th>
                                            <th>Цена</th>
                                            <th>Склад</th>
                                            <th>Slug</th>
                                            <th>Действия</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var product in Model.Products)
                                        {
                                            <tr data-product-id="@product.Id">
                                                <td>
                                                    <strong>@product.Name</strong>
                                                    @if (product.IsDeleted)
                                                    {
                                                        <span class="badge bg-danger ms-2">Удален</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(product.Description))
                                                    {
                                                        <span title="@product.Description">
                                                            @(product.Description.Length > 50 ? product.Description.Substring(0, 50) + "..." : product.Description)
                                                        </span>
                                                    }
                                                </td>
                                                <td>
                                                    <span class="badge bg-secondary">@product.GroupName</span>
                                                </td>
                                                <td>
                                                    <strong class="text-success">@product.Price.ToString("C")</strong>
                                                </td>
                                                <td>
                                                    <span class="badge bg-warning">@product.Stock</span>
                                                </td>
                                                <td>
                                                    <code>@product.Slug</code>
                                                </td>
                                                <td>
                                                    <div class="btn-group" role="group">
                                                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="editProduct('@product.Id')">
                                                            <i class="bi bi-pencil"></i>
                                                        </button>
                                                        @if (!product.IsDeleted)
                                                        {
                                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteProduct('@product.Id', '@product.Name')">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно редактирования группы -->
<div class="modal fade" id="editGroupModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-pencil-square"></i> Редактирование группы
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editGroupForm">
                    <input type="hidden" id="groupId" name="Id">
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="groupName" class="form-label">Название группы *</label>
                                <input type="text" class="form-control" id="groupName" name="Name" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="groupSlug" class="form-label">Slug *</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="groupSlug" name="Slug" required>
                                    <button type="button" class="btn btn-outline-secondary" onclick="generateSlug('groupName', 'groupSlug')">
                                        <i class="bi bi-arrow-repeat"></i>
                                    </button>
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="groupDescription" class="form-label">Описание</label>
                        <textarea class="form-control" id="groupDescription" name="Description" rows="3"></textarea>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="groupParentId" class="form-label">Родительская группа</label>
                                <select class="form-select" id="groupParentId" name="ParentId">
                                    <option value="">Без родительской группы</option>
                                    @foreach (var group in Model.AllGroups.Where(g => !g.IsDeleted))
                                    {
                                        <option value="@group.Id">@group.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="groupImageUrl" class="form-label">URL изображения</label>
                                <input type="text" class="form-control" id="groupImageUrl" name="ImageUrl">
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" onclick="saveGroup()">
                    <i class="bi bi-check"></i> Сохранить
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно редактирования товара -->
<div class="modal fade" id="editProductModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-pencil-square"></i> Редактирование товара
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editProductForm">
                    <input type="hidden" id="productId" name="Id">
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productName" class="form-label">Название товара *</label>
                                <input type="text" class="form-control" id="productName" name="Name" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productSlug" class="form-label">Slug *</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="productSlug" name="Slug" required>
                                    <button type="button" class="btn btn-outline-secondary" onclick="generateSlug('productName', 'productSlug')">
                                        <i class="bi bi-arrow-repeat"></i>
                                    </button>
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="productDescription" class="form-label">Описание</label>
                        <textarea class="form-control" id="productDescription" name="Description" rows="3"></textarea>
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="productGroupId" class="form-label">Группа *</label>
                                <select class="form-select" id="productGroupId" name="GroupId" required>
                                    @foreach (var group in Model.AllGroups.Where(g => !g.IsDeleted))
                                    {
                                        <option value="@group.Id">@group.Name</option>
                                    }
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="productPrice" class="form-label">Цена *</label>
                                <input type="number" class="form-control" id="productPrice" name="Price" step="0.01" min="0.01" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="productStock" class="form-label">Количество на складе</label>
                                <input type="number" class="form-control" id="productStock" name="Stock" min="0">
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="productImageUrl" class="form-label">URL изображения</label>
                        <input type="text" class="form-control" id="productImageUrl" name="ImageUrl">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" onclick="saveProduct()">
                    <i class="bi bi-check"></i> Сохранить
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно подтверждения удаления -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-exclamation-triangle text-warning"></i> Подтверждение удаления
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="deleteConfirmMessage"></p>
                <div class="alert alert-warning">
                    <i class="bi bi-info-circle"></i>
                    <strong>Внимание:</strong> Это действие нельзя отменить. Элемент будет помечен как удаленный.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="bi bi-trash"></i> Удалить
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentEditId = null;
        let currentEditType = null;

        // Редактирование группы
        function editGroup(groupId) {
            currentEditId = groupId;
            currentEditType = 'group';
            
            fetch(`/api/adminedit/groups/${groupId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const group = data.data;
                        document.getElementById('groupId').value = group.id;
                        document.getElementById('groupName').value = group.name;
                        document.getElementById('groupDescription').value = group.description || '';
                        document.getElementById('groupSlug').value = group.slug;
                        document.getElementById('groupParentId').value = group.parentId || '';
                        document.getElementById('groupImageUrl').value = group.imageUrl || '';
                        
                        // Очистка ошибок валидации
                        clearValidationErrors('editGroupForm');
                        
                        new bootstrap.Modal(document.getElementById('editGroupModal')).show();
                    } else {
                        showAlert('Ошибка', data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Ошибка', 'Не удалось загрузить данные группы', 'danger');
                });
        }

        // Редактирование товара
        function editProduct(productId) {
            currentEditId = productId;
            currentEditType = 'product';
            
            fetch(`/api/adminedit/products/${productId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const product = data.data;
                        document.getElementById('productId').value = product.id;
                        document.getElementById('productName').value = product.name;
                        document.getElementById('productDescription').value = product.description || '';
                        document.getElementById('productSlug').value = product.slug;
                        document.getElementById('productGroupId').value = product.groupId;
                        document.getElementById('productPrice').value = product.price;
                        document.getElementById('productStock').value = product.stock;
                        document.getElementById('productImageUrl').value = product.imageUrl || '';
                        
                        // Очистка ошибок валидации
                        clearValidationErrors('editProductForm');
                        
                        new bootstrap.Modal(document.getElementById('editProductModal')).show();
                    } else {
                        showAlert('Ошибка', data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Ошибка', 'Не удалось загрузить данные товара', 'danger');
                });
        }

        // Сохранение группы
        function saveGroup() {
            const form = document.getElementById('editGroupForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData);
            
            // Валидация
            if (!validateGroupForm(data)) {
                return;
            }
            
            const groupId = data.Id;
            
            fetch(`/api/adminedit/groups/${groupId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('Успех', data.message, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('editGroupModal')).hide();
                    location.reload(); // Перезагружаем страницу для обновления данных
                } else {
                    showAlert('Ошибка', data.message, 'danger');
                    if (data.errors) {
                        showValidationErrors('editGroupForm', data.errors);
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Ошибка', 'Не удалось сохранить группу', 'danger');
            });
        }

        // Сохранение товара
        function saveProduct() {
            const form = document.getElementById('editProductForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData);
            
            // Валидация
            if (!validateProductForm(data)) {
                return;
            }
            
            const productId = data.Id;
            
            fetch(`/api/adminedit/products/${productId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('Успех', data.message, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('editProductModal')).hide();
                    location.reload(); // Перезагружаем страницу для обновления данных
                } else {
                    showAlert('Ошибка', data.message, 'danger');
                    if (data.errors) {
                        showValidationErrors('editProductForm', data.errors);
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Ошибка', 'Не удалось сохранить товар', 'danger');
            });
        }

        // Удаление группы
        function deleteGroup(groupId, groupName) {
            currentEditId = groupId;
            currentEditType = 'group';
            document.getElementById('deleteConfirmMessage').textContent = 
                `Вы уверены, что хотите удалить группу "${groupName}"?`;
            new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show();
        }

        // Удаление товара
        function deleteProduct(productId, productName) {
            currentEditId = productId;
            currentEditType = 'product';
            document.getElementById('deleteConfirmMessage').textContent = 
                `Вы уверены, что хотите удалить товар "${productName}"?`;
            new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show();
        }

        // Подтверждение удаления
        document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
            if (currentEditType === 'group') {
                deleteGroupConfirm(currentEditId);
            } else if (currentEditType === 'product') {
                deleteProductConfirm(currentEditId);
            }
        });

        function deleteGroupConfirm(groupId) {
            fetch(`/api/adminedit/groups/${groupId}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('Успех', data.message, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal')).hide();
                    location.reload();
                } else {
                    showAlert('Ошибка', data.message, 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Ошибка', 'Не удалось удалить группу', 'danger');
            });
        }

        function deleteProductConfirm(productId) {
            fetch(`/api/adminedit/products/${productId}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('Успех', data.message, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal')).hide();
                    location.reload();
                } else {
                    showAlert('Ошибка', data.message, 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Ошибка', 'Не удалось удалить товар', 'danger');
            });
        }

        // Генерация slug
        function generateSlug(nameFieldId, slugFieldId) {
            const name = document.getElementById(nameFieldId).value;
            if (!name) return;
            
            fetch('/api/adminedit/generate-slug', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ text: name })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById(slugFieldId).value = data.slug;
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }

        // Валидация формы группы
        function validateGroupForm(data) {
            let isValid = true;
            
            if (!data.Name || data.Name.trim() === '') {
                showFieldError('groupName', 'Название группы обязательно');
                isValid = false;
            }
            
            if (!data.Slug || data.Slug.trim() === '') {
                showFieldError('groupSlug', 'Slug группы обязателен');
                isValid = false;
            }
            
            return isValid;
        }

        // Валидация формы товара
        function validateProductForm(data) {
            let isValid = true;
            
            if (!data.Name || data.Name.trim() === '') {
                showFieldError('productName', 'Название товара обязательно');
                isValid = false;
            }
            
            if (!data.Slug || data.Slug.trim() === '') {
                showFieldError('productSlug', 'Slug товара обязателен');
                isValid = false;
            }
            
            if (!data.GroupId || data.GroupId === '') {
                showFieldError('productGroupId', 'Группа товара обязательна');
                isValid = false;
            }
            
            if (!data.Price || parseFloat(data.Price) <= 0) {
                showFieldError('productPrice', 'Цена должна быть больше 0');
                isValid = false;
            }
            
            return isValid;
        }

        // Показать ошибку поля
        function showFieldError(fieldId, message) {
            const field = document.getElementById(fieldId);
            field.classList.add('is-invalid');
            const feedback = field.parentNode.querySelector('.invalid-feedback');
            if (feedback) {
                feedback.textContent = message;
            }
        }

        // Очистить ошибки валидации
        function clearValidationErrors(formId) {
            const form = document.getElementById(formId);
            const invalidFields = form.querySelectorAll('.is-invalid');
            invalidFields.forEach(field => {
                field.classList.remove('is-invalid');
            });
        }

        // Показать ошибки валидации
        function showValidationErrors(formId, errors) {
            clearValidationErrors(formId);
            errors.forEach(error => {
                // Здесь можно добавить логику для отображения конкретных ошибок
                console.error('Validation error:', error);
            });
        }

        // Показать уведомление
        function showAlert(title, message, type) {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    <strong>${title}:</strong> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Добавляем уведомление в начало страницы
            const container = document.querySelector('.container-fluid');
            container.insertAdjacentHTML('afterbegin', alertHtml);
            
            // Автоматически скрываем через 5 секунд
            setTimeout(() => {
                const alert = container.querySelector('.alert');
                if (alert) {
                    bootstrap.Alert.getOrCreateInstance(alert).close();
                }
            }, 5000);
        }

        // Автогенерация slug при вводе названия
        document.getElementById('groupName').addEventListener('input', function() {
            if (document.getElementById('groupSlug').value === '') {
                generateSlug('groupName', 'groupSlug');
            }
        });

        document.getElementById('productName').addEventListener('input', function() {
            if (document.getElementById('productSlug').value === '') {
                generateSlug('productName', 'productSlug');
            }
        });
    </script>
}
